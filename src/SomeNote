java.text.DateFormat抽象类  静态方法getDateFormatInstance(int) ;获取一个日期格式化对象
java.text.SimpleDateFormat  public Date parse(String);匹配的类型
常用spring注解

@Component是所有受Spring 管理组件的通用形式，@Component注解可以放在类的头上，@Component不推荐使用。Component标注
@Respository:标识持久层bean组件
@Service 标识服务层（业务层）bean组件
@Controller:标识表现层bean组件
连接点：横切关注点的另外一种表达形式，共同业务和核心业务分离的点，前置，后置，异常处理等
切点：可以通过切点定位到某个特定的连接点
要在Spring应用中使用AspectJ注解：必须在classpath下包含AspectJ类库：aopalliance.jar,aspectj.weaver.jar和spring-aspects.jar
将aop Schema 添加到<beans>根元素中 
要在Spring IOC容器中启用AspectJ注解支持，只要在Bean配置文件中定义一个空的XML元素<aop:aspect j-autoproxy>
当Spring IOC容器侦测到Bean配置文件中的<aop:aspect j-autoproxy>元素时，会自动为与AspectJ切面匹配的Bean创建代理

通过AspectJ框架标注进行AOP的配置
1：需要写一个切面类，类，Aspect标注
2：共同的业务加入切面，共同业务的方法
3前置通知@Before(execution(连接点的完整签名))，后置通知@After
4：需要在Spring配置文件中，加入一个非常重要的标签，Aspect注解的类进行自动生成代理的工作<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
5:需要进行对切面类，和目标对象进行监管：<context:component-scan base-package="com.spring.beans.aop"></context:component-scan>

在通知方法的内部，如果想访问连接点的细节可以在通知方法中申明一个类型为JoinPoint的参数，然后就能访问链接细节。

spring常见通知：
1：前置通知 @Before
2：后置通知 @After
3：返回通知 @AfterReturning，只有正确返回结果才去执行
4：异常通知 @AfterThrowing,只在连接点抛出异常时才执行
5:环绕通知，连接点的参数类型必须是ProceedingJoinPoint,它是JoinPoint的子接口，允许控制何时执行，是否执行连接点 （注意：环绕通知的方法需要返回
目标方法执行之后的结果，即调用joinPoint.proceed();的返回值，否则会出现空指针异常

切面的优先级：
1：通过@Order标注指定切面的优先级@Order（整数类型），越小优先级越高
2：实现一个Ordered接口，getOrder（）方法，控制返回值
重用切点表达式：
1：写一个方法，方法是没有方法体的，
2：给方法加入一个@PointCut（“切点表达式”）
3:在通知当中Pointcut="方法名称（）"